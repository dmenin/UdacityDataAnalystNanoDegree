col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
round=NULL,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
round=NULL,
leaf.round=NULL,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
round=NULL,
leaf.round=NULL, split.round=0,nn.round=.3,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
round=NULL,
leaf.round=NULL, split.round=0,nn.round=.3)
plot(fit)
text(fit)
prp(fit)
fit
prp(fit, main="Decision Tree on Wine Quality",
round=0,
leaf.round=0, split.round=0,nn.round=.3)
,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
nrow(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & !pH<3.22 )
)
prp(fit, main="Decision Tree on Wine Quality",
round=0,
leaf.round=0, split.round=0,nn.round=.3)
,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
round=0,
leaf.round=0, split.round=0,nn.round=.3)
prp(fit, main="Decision Tree on Wine Quality",
round=0,
leaf.round=0, split.round=0,nn.round=0)
prp(fit)
prp(fit), main="Decision Tree on Wine Quality",
digits=4,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
digits=4,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit, main="Decision Tree on Wine Quality",
digits=6,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & !pH<3.22 )
nrow(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & !pH<3.22 )
)
prp(fit,
#main="Decision Tree on Wine Quality",
digits=6,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
subset(df2, !alcohol<11.75  & free.sulfur.dioxide<20.5 !alcohol<12.05 & !pH<3.22 )
subset(df2, !alcohol<11.75  & free.sulfur.dioxide<20.5 & !alcohol<12.05 & !pH<3.22 )
nrow(
subset(df2, !alcohol<11.75  & free.sulfur.dioxide<20.5 & !alcohol<12.05 & !pH<3.22 )
)
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & !pH<3.22 )
nrow(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & !pH<3.22 )
)
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & !pH<3.22 )
table(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & !pH<3.22)$rating
)
table(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & pH<3.22)$rating
)
?rpart
prp(fit,
#main="Decision Tree on Wine Quality",
digits=6,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit,
#main="Decision Tree on Wine Quality",
digits=6,
extra=8,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit,
#main="Decision Tree on Wine Quality",
digits=6,
extra=108,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
prp(fit,
#main="Decision Tree on Wine Quality",
digits=6,
extra=1,             #  the probability of the fitted class.
branch=.5,           # change angle of branch lines
faclen=0,            # do not abbreviate factor levels
shadow.col="gray",   # shadows under the leaves
branch.lty=3,        # draw branches using dotted lines
split.cex=1.2,       # make the split text larger than the node text
split.prefix="is ",  # put "is " before split text
split.suffix="?",    # put "?" after split text
col=cols, border.col=cols,   # green if Good
split.box.col="lightgray",   # lightgray split boxes (default is white)
split.border.col="darkgray" # darkgray border on split boxes
)
summary(
subset(df2, alcohol<12  & !alcohol<11 & !residual.sugar<7   )$density
)
table(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & pH<3.22)$rating
)
table(
subset(df2, !alcohol<11.75  & !free.sulfur.dioxide<20.5 & alcohol<12.05 & !pH<3.22)$rating
)
setwd("C:/git/UdacityDataAnalystNanoDegree/4_R/FinalProject/")
df<-read.csv("wineQualityWhites.csv")
library(plyr)
library(dplyr)
library(sfsmisc)
library(reshape2 )
library(ggplot2)
library(gridExtra)
library (corrplot)
library(caret)
library(tree)
ggplot(data=df,aes(x=quality))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
df$rating <- ifelse(df$quality <= 5, 'Bad',
ifelse(df$quality <= 7, 'Average',
ifelse(df$quality<=8,'Good',
'Excellent'
)
)
)
df$rating <- ordered(df$rating,levels = c('Bad', 'Average', 'Good', 'Excellent'))
df$quality <- as.factor(df$quality)
ggplot(data=df,aes(x=rating))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
grid.arrange (p1,p2)
p1 <- ggplot(data=df,aes(x=quality))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
p2 <- ggplot(data=df,aes(x=rating))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
grid.arrange (p1,p2)
grid.arrange (p1,p2, ncol=2)
melt_data <- melt(df[ ,!(colnames(df) == "rating")],id.vars=c("X","quality"))
plots <- dlply(melt_data,.(variable),function(chunk)
{
ggplot(data=chunk, aes(x=factor(quality), y = value)) + geom_boxplot()+  stat_summary(fun.y=mean,geom = 'point', shape = 4) +  labs(y=unique(chunk$variable))
})
do.call(grid.arrange,c(plots,ncol=2))
plots <- dlply(melt_data,.(variable),function(chunk)
{
ggplot(data= chunk) +  aes(x = factor(quality), y = value)+
stat_summary(aes(fill = factor(quality)), fun.y=mean, geom="bar")+
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6, vjust = 1)  +
labs(y=unique(chunk$variable)) + theme(legend.position="none") +
geom_smooth(method = "lm", se=FALSE, color="black", type='dotted', aes(group=1), size =1,lty = 2)
})
do.call(grid.arrange,c(plots,ncol=2))
model.lm <- lm(alcohol ~ quality, data =df)
summary(model.lm)
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data) #run the regression
s<-summary(model.lm)
x<-as.data.frame(round(s$coefficients[,1],4)) #get the coeficients from the summary
names(x) <- name # name the column
rsq <- round(summary(model.lm)$r.squared,4) #get r-squared
x<-rbind(x,rsq)  #and add it to the data frame
rownames(x)[8] <-"r-squared"  #name the row
x
}
grid <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(grid)){
grid<-fit_model(df[,i], df, n)
} else {
grid<-cbind(grid,fit_model(df[,i], df, n) )
}
i = i+1
}
}
grid
?abbreviate
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data) #run the regression
s<-summary(model.lm)
x<-as.data.frame(round(s$coefficients[,1],4)) #get the coeficients from the summary
names(x) <- abbreviate(name,3) # name the column
rsq <- round(summary(model.lm)$r.squared,4) #get r-squared
x<-rbind(x,rsq)  #and add it to the data frame
rownames(x)[8] <-"r-squared"  #name the row
x
}
grid <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(grid)){
grid<-fit_model(df[,i], df, n)
} else {
grid<-cbind(grid,fit_model(df[,i], df, n) )
}
i = i+1
}
}
grid
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data) #run the regression
s<-summary(model.lm)
x<-as.data.frame(round(s$coefficients[,1],4)) #get the coeficients from the summary
names(x) <- abbreviate(name,3, method = c("left.kept")) # name the column
rsq <- round(summary(model.lm)$r.squared,4) #get r-squared
x<-rbind(x,rsq)  #and add it to the data frame
rownames(x)[8] <-"r-squared"  #name the row
x
}
grid <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(grid)){
grid<-fit_model(df[,i], df, n)
} else {
grid<-cbind(grid,fit_model(df[,i], df, n) )
}
i = i+1
}
}
grid
col1 <- colorRampPalette(c("#00007F","blue","#007FFF","cyan","white", "cyan", "#007FFF", "blue","#00007F"))
c<-cor(select(df, -quality))
c2 <-round(c, digits=2)
corrplot(c2, method="color", col=col1(20), cl.length=21,order = "AOE", addCoef.col="grey", tl.srt=45,tl.col="black")
corrplot(c,add=TRUE, type="lower", method="number",order="AOE", col="black",
diag=FALSE,tl.pos="n", cl.pos="n", tl.srt=45)
col1 <- colorRampPalette(c("#00007F","blue","#007FFF","cyan","white", "cyan", "#007FFF", "blue","#00007F"))
c<-cor(select(df, -quality, -rating))
c2 <-round(c, digits=2)
corrplot(c2, method="color", col=col1(20), cl.length=21,order = "AOE", addCoef.col="grey", tl.srt=45,tl.col="black")
corrplot(c,add=TRUE, type="lower", method="number",order="AOE", col="black",
diag=FALSE,tl.pos="n", cl.pos="n", tl.srt=45)
lesscorrelated<- ggplot(aes(x = free.sulfur.dioxide, y = pH), data=df) +
geom_point()+
geom_smooth(method = 'auto', color = 'red')+
xlim(0, quantile(df$free.sulfur.dioxide,0.99))
morecorrelated<- ggplot(aes(x = residual.sugar, y = density), data=df) +
geom_point()+ geom_smooth(, color = 'red') +
xlim(0, quantile(df$residual.sugar,0.99))
grid.arrange(lesscorrelated, morecorrelated, ncol=2)
p1<-ggplot(aes(x =  log10(alcohol), y =log10(residual.sugar) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
p2<-ggplot(aes(x =  log10(alcohol), y =log10(chlorides) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'blue')
p3<-ggplot(aes(x =  log10(alcohol), y =log10(density) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'orange')
p4<-ggplot(aes(x =  log10(alcohol), y =log10(total.sulfur.dioxide) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'violet')
grid.arrange(p1,p2,p3,p4, ncol=2)
p1<-ggplot(aes(x =  log10(total.sulfur.dioxide), y =log10(residual.sugar) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
p2<-ggplot(aes(x =  log10(total.sulfur.dioxide), y =log10(free.sulfur.dioxide) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'blue')
p3<-ggplot(aes(x =  log10(total.sulfur.dioxide), y =log10(density) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'violet')
p4<-ggplot(aes(x =  log10(total.sulfur.dioxide), y =log10(alcohol) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'orange')
grid.arrange(p1,p2,p3,p4, ncol=2)
ggplot(aes(x =  log10(residual.sugar), y = log10(density)), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
ggplot(aes(x =  log10(pH), y = log10(fixed.acidity)), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
df[,1:11]
correlationMatrix <- cor(df[,1:11])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.8, verbose = FALSE)
print (highlyCorrelated)
df
View(df)
df<- df[!df$X == 2782, ]
df[,c("X")] <- list(NULL)
df2 <- subset(df, rating != 'Average')
df2[df2$rating == 'Excellent',]$rating <- 'Good'
p1<-ggplot(data = df2, aes(x = alcohol, y = volatile.acidity,color = rating)) +  geom_point()
p2<-ggplot(data = df2, aes(x = alcohol, y = free.sulfur.dioxide,color = rating)) +  geom_point()
p3<-ggplot(data = df2, aes(x = alcohol, y = chlorides,color = rating)) +  geom_point()
p4<-ggplot(data = df2, aes(x = alcohol, y = pH,color = rating)) +  geom_point()
p5<-ggplot(data = df2, aes(x = volatile.acidity, y = free.sulfur.dioxide, color = rating)) +  geom_point()
p6<-ggplot(data = df2, aes(x = volatile.acidity, y = chlorides, color = rating)) +  geom_point()
p7<-ggplot(data = df2, aes(x = volatile.acidity, y = pH, color = rating)) +  geom_point()
p8<-ggplot(data = df2, aes(x = free.sulfur.dioxide, y = chlorides, color = rating)) +  geom_point()
p9<-ggplot(data = df2, aes(x = free.sulfur.dioxide, y = pH, color = rating)) +  geom_point()
p10<-ggplot(data = df2, aes(x = chlorides, y = pH, color = rating)) +  geom_point()
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,ncol=2)
p1 <- ggplot(data=df,aes(x=quality))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
p2 <- ggplot(data=df,aes(x=rating))+
geom_bar(aes(y = (..count..)),fill="orange")+
geom_text(aes(y = (..count..),label =   ifelse((..count..)==0,"",scales::percent((..count..)/sum(..count..)))), stat="bin",colour="darkgreen")
grid.arrange (p1,p2, ncol=2)
describe(df)
boxplot(fixed.acidity, col="slategray2", pch=19)
WhiteWine <- df
attach(WhiteWine)
boxplot(fixed.acidity, col="slategray2", pch=19)
boxplot(fixed.acidity, col="slategray2")
boxplot(fixed.acidity, col="slategray2", pch=19)
plots <- dlply(melt_data,.(variable),function(chunk)
{
ggplot(data=chunk, aes(x=factor(quality), y = value)) + geom_boxplot()+  stat_summary(fun.y=mean,geom = 'point', shape = 4) +  labs(y=unique(chunk$variable))
})
do.call(grid.arrange,c(plots,ncol=2))
plots <- dlply(melt_data,.(variable),function(chunk)
{
boxplot(variable, col="slategray2", pch=19)
})
do.call(grid.arrange,c(plots,ncol=2))
plots <- dlply(melt_data,.(variable),function(chunk)
{
boxplot(chunk$variable, col="slategray2", pch=19)
#ggplot(data=chunk, aes(x=factor(quality), y = value)) + geom_boxplot()+
# stat_summary(fun.y=mean,geom = 'point', shape = 4) +  labs(y=unique(chunk$variable))
})
do.call(grid.arrange,c(plots,ncol=2))
plots <- dlply(melt_data,.(variable),function(chunk)
{
boxplot(fixed.acidity, col="slategray2", pch=19)
#ggplot(data=chunk, aes(x=factor(quality), y = value)) + geom_boxplot()+
# stat_summary(fun.y=mean,geom = 'point', shape = 4) +  labs(y=unique(chunk$variable))
})
do.call(grid.arrange,c(plots,ncol=2))
plots <- dlply(melt_data,.(variable),function(chunk)
{
#boxplot(chunk$variable, col="slategray2", pch=19)
ggplot(data=chunk, aes(x=factor(quality), y = value)) + geom_boxplot()+
stat_summary(fun.y=mean,geom = 'point', shape = 4) +  labs(y=unique(chunk$variable))
})
do.call(grid.arrange,c(plots,ncol=2))
boxplot(chunk$variable, col="slategray2", pch=19)
boxplot(df$variable, col="slategray2", pch=19)
boxplot(df$fixed.acidity, col="slategray2", pch=19)
boxplot(df$fixed.acidity, df$quality, col="slategray2", pch=19)
boxplot(df$fixed.acidity, df$quality, col="slategray2", pch=19)
df$alchohol
mean(df$alcohol)
mean((subset(df, quality == 3))$alcohol)
mean((subset(df, quality == 4))$alcohol)
mean((subset(df, quality == 3))$alcohol) - mean((subset(df, quality == 4))$alcohol)
mean((subset(df, quality == 4))$alcohol)
mean((subset(df, quality == 4))$alcohol)-mean((subset(df, quality == 3))$alcohol)
print ('a')
ggplot(aes(x =  log10(alcohol), y =log10(residual.sugar) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
ggplot(aes(x =  (alcohol), y =(residual.sugar) ), data=df) +
geom_point() +
geom_smooth(method = 'auto', color = 'red')
correlationMatrix <- cor(df[,1:11])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.8, verbose = FALSE)
print (highlyCorrelated)
