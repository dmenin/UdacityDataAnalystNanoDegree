model.aov <- aov(alcohol ~ quality, data = df)
summary(model.aov)
tail((model.aov$fitted)
)
foo <- function(variable)
{
model.lm <- lm(alcohol ~ variable, data =df)
summary(model.lm)
}
foo(df$alcohol)
a<-foo(df$alcohol)
a
foo <- function(variable)
{
model.lm <- lm(variable ~ quality, data =df)
summary(model.lm)
}
a<-foo(df$alcohol)
a
a$call
a$terms
a$residuals
a$coefficients
a$coefficients$Estimate
a$coefficients[0]
a$coefficients[1]
type(a$coefficients)
class(a$coefficients)
a$coefficients
a$coefficients[,1]
a$coefficients[,0:1]
a$coefficients[,0:2]
as.data.frame(a$coefficients[,0:1])
as.data.frame(a$coefficients[,1])
x<-as.data.frame(a$coefficients[,1])
x
df$alcohol
names(df$alcohol)
name(df$alcohol)
a<-foo(df$alcohol, df, 'alcohol')
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(a$coefficients[,1])
names(x) <- name
}
a<-fit_model(df$alcohol, df, 'alcohol')
a
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(a$coefficients[,1])
names(x) <- name
x
}
a<-fit_model(df$alcohol, df, 'alcohol')
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(a$coefficients[,1])
x
}
a<-fit_model(df$alcohol, df, 'alcohol')
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
x
}
a<-fit_model(df$alcohol, df, 'alcohol')
a
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
names(x) <- 'name'
x
}
a<-fit_model(df$alcohol, df, 'alcohol')
a
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
names(x) <- name
x
}
a<-fit_model(df$alcohol, df, 'alcohol')
a
for(i in names(df)){
df[[paste(i, 'length', sep="_")]] <- str_length(df[[i]])
}
for(i in names(df)){
i
}
for(i in names(df)){
print (i)
}
for(i in names(df)){
head(df$i)
}
for(i in names(df)){
print head(df$i)
}
df[,c("X")] <- list(NULL)
df[,1]
i = 0
for(n in names(df)){
a<-fit_model(df[,i], df, n)
}
a<-fit_model(df[,2], df, 'alcohol')
a
for(n in names(df)){
a<-fit_model(df[,i], df, n)
}
for(n in names(df)){
a<-fit_model(df[,2], df, n)
}
a
for(n in names(df)){
if a not in ('quality'){
a<-fit_model(df[,2], df, n)
}
for(n in names(df)){
if a not in ('quality'){
a<-fit_model(df[,2], df, n)
}
}
for(n in names(df)){
if a not in ('quality'){
a<-fit_model(df[,2], df, n)
}
}
for(n in names(df)){
if n not in ('quality'){
a<-fit_model(df[,2], df, n)
}
}
for(n in names(df)){
if n not in ('quality')
a<-fit_model(df[,2], df, n)
}
for(n in names(df))
a<-fit_model(df[,2], df, n)
}
for(n in names(df))
{
a<-fit_model(df[,2], df, n)
}
for(n in names(df))
{
if (n not in ('quality')) {
a<-fit_model(df[,2], df, n)
}
}
if (n not in ('quality')) {
a<-fit_model(df[,2], df, n)
}
if(1>1){print 'a'}
if(1>1){
print 'a'
}
if(1 > 100) {
net.price <- 2
}
if (1 > 100) {
a<-fit_model(df[,2], df, n)
}
for(n in names(df))
{
if (n != 'quality') {
a<-fit_model(df[,2], df, n)
}
}
a
i = i
for(n in names(df))
{
if (n != 'quality') {
a<-fit_model(df[,2], df, n)
i+=1
}
}
for(n in names(df))
{
if (n != 'quality') {
a<-fit_model(df[,2], df, n)
}
}
for(n in names(df))
{
if (n != 'quality') {
a<-fit_model(df[,2], df, n)
i = i+1
}
}
i = i
for(n in names(df))
{
if (n != 'quality') {
a<-fit_model(df[,2], df, n)
i = i+1
}
}
i = i
for(n in names(df))
{
if (n != 'quality') {
a<-cbind(a,fit_model(df[,2], df, n) )
i = i+1
}
}
a
i = i
for(n in names(df))
{
if (n != 'quality') {
a<-cbind(a,fit_model(df[,i], df, n) )
i = i+1
}
}
i = 1
for(n in names(df))
{
if (n != 'quality') {
a<-cbind(a,fit_model(df[,i], df, n) )
i = i+1
}
}
a
View(a)
a <-null
a <-Null
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
a<-cbind(a,fit_model(df[,i], df, n) )
i = i+1
}
}
a
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if is.null(a){
a<-fit_model(df[,i], df, n)
} else {
a<-cbind(a,fit_model(df[,i], df, n) )
}
i = i+1
}
}
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(a)){
a<-fit_model(df[,i], df, n)
} else {
a<-cbind(a,fit_model(df[,i], df, n) )
}
i = i+1
}
}
a
View(a)
model.lm <- lm(alcohol ~ quality, data =df)
summary(model.lm)
rsq <- summary(model.lm)$r.squared
rsq
a<-fit_model(df[,2], df, 'alcohol')
a
model.lm <- lm(alcohol ~ quality, data =df)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
x
rsq <- summary(model.lm)$r.squared
x
x.rbind(rsq)
rbind(x,rsq)
rsq
x
rbind(x,rsq)
x<-rbind(x,rsq)
x
View(x)
row.names(x)
row.names(x[1])
row.names(x[1,])
model.lm <- lm(alcohol ~ quality, data =df)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
rsq <- summary(model.lm)$r.squared
x
existingDF <- as.data.frame(matrix(seq(20),nrow=5,ncol=4))
existingDF
r <- 3
r
newrow <- seq(4)
newrow
existingDF[seq(r,nrow(existingDF)),]
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF
existingDF[r,] <- newrow
existingDF
x
rsq <- summary(model.lm)$r.squared
x<-rbind(x,rsq)
x
row.names(x[8])  <-"a"
row.names(x[8,])  <-"a"
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
names(x) <- name
rsq <- summary(model.lm)$r.squared
x<-rbind(x,rsq)
x
}
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(a)){
a<-fit_model(df[,i], df, n)
} else {
a<-cbind(a,fit_model(df[,i], df, n) )
}
i = i+1
}
}
a
summary(model.lm)
model.lm <- lm(alcohol ~ quality, data =df)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
rsq <- summary(model.lm)$r.squared
names(rsq) <- "aaa"
x<-rbind(x,rsq)
x
rsq
rbind(x,rsq)
rbind(x,rsq)
rbind(x,rsq)
rownames(x)[2] <-"aaa"
x
model.lm <- lm(alcohol ~ quality, data =df)
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1])
rsq <- summary(model.lm)$r.squared
x<-rbind(x,rsq)
rownames(x)[8] <-"r-squared"
x
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data) #run the regression
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1]) #get the coeficients from the summary
names(x) <- name # name the column
rsq <- summary(model.lm)$r.squared #get r-squared
x<-rbind(x,rsq)  #and add it to the data frame
rownames(x)[8] <-"r-squared"  #name the row
x
}
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(a)){
a<-fit_model(df[,i], df, n)
} else {
a<-cbind(a,fit_model(df[,i], df, n) )
}
i = i+1
}
}
a
model.lm <- lm(alcohol ~ quality, data =df)
s<-summary(model.lm)
s
rsq <- summary(model.lm)$r.squared
rsq
sqrt(rsq)
model.lm <- lm(alcohol ~ quality, data =df)
plot(x = model.lm$fitted, y = data.df$alcohol,
xlab = "Fitted duration", ylab = "Observed duration")
abline(lm(data.df$alcohol ~ model.lm$fitted), col="red")
plot(x = model.lm$fitted, y = alcohol,
xlab = "Fitted duration", ylab = "Observed duration")
abline(lm(alcohol ~ model.lm$fitted), col="red")
plot(x = model.lm$fitted, y = df$alcohol,
xlab = "Fitted duration", ylab = "Observed duration")
abline(lm(df$alcohol ~ model.lm$fitted), col="red")
model.lm <- lm(alcohol ~ quality, data =df)
plot(x = model.lm$fitted, y = df$alcohol, xlab = "Fitted alcohol", ylab = "Observed alcohol")
abline(lm(df$alcohol ~ model.lm$fitted), col="red")
plot(x = df$alcohol, y =model.lm$fitted , xlab = "Fitted alcohol", ylab = "Observed alcohol")
abline(lm(df$alcohol ~ model.lm$fitted), col="red")
model.lm
plot(x = df$alcohol, y =model.lm$fitted , xlab = "Observed alcohol", ylab = "Fitted alcohol")
abline(lm(df$alcohol ~ model.lm$fitted), col="red")
plot(x = model.lm$fitted, y = df$alcohol, xlab = "Fitted alcohol", ylab = "Observed alcohol")
abline(lm(df$alcohol ~ model.lm$fitted), col="red")
a<-fit_model(df$alcohol, df, 'alcohol')
fit_model <- function(variable, data, name)
{
model.lm <- lm(variable ~ quality, data = data) #run the regression
s<-summary(model.lm)
x<-as.data.frame(s$coefficients[,1]) #get the coeficients from the summary
names(x) <- name # name the column
rsq <- summary(model.lm)$r.squared #get r-squared
x<-rbind(x,rsq)  #and add it to the data frame
rownames(x)[8] <-"r-squared"  #name the row
x
}
a <- NULL
i = 1
for(n in names(df))
{
if (n != 'quality') {
if (is.null(a)){
a<-fit_model(df[,i], df, n)
} else {
a<-cbind(a,fit_model(df[,i], df, n) )
}
i = i+1
}
}
a
fit_model(df$alcohol, df, 'alcohol')
fit_model(df$alcohol, df, 'pH')
fit_model(df$pH, df, 'pH')
})
hsb2 <- within(read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv"), {
race <- as.factor(race)
schtyp <- as.factor(schtyp)
prog <- as.factor(prog)
})
hsb2
View(hsb2)
attach(hsb2)
summary(manova(cbind(read, write, math) ~ prog))
pf <- read.csv('pseudo_facebook.tsv', sep='\t')
setwd('C:/git/UdacityDataAnalystNanoDegree/R/data')
pf <- read.csv('pseudo_facebook.tsv', sep='\t')
setwd('C:/git/UdacityDataAnalystNanoDegree/4_R/data')
pf <- read.csv('pseudo_facebook.tsv', sep='\t')
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
library(dplyr)
library(ggplot2)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf)
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
conflicts()
library(dplyr)
library(plyr)
library(dplyr)
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
cor(select(df, -quality))
c<-cor(select(df, -quality))
View(c)
write.csv(c,"cor.csv")
getwd()
View(c)
ggplot(data= df) +  aes(x = factor(quality), y = fixed.acidity)+
stat_summary(aes(fill = factor(quality)), fun.y=mean, geom="bar")+
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6, vjust = -0.5)+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1), size =2)
plot(df$volatile.acidity, df$fixed.acidity )
plot(df$density, df$residual.sugar )
with (subset(pf, age<=70), cor.test(age, friend_count, method='pearson'))
plot(df$density, df$residual.sugar )
plot(df$volatile.acidity, df$fixed.acidity )
cor(select(df, -quality))
pairs(select(df, -quality))
cor(df)
